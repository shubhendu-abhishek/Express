var mongoose = require('mongoose');

mongoose.Promise = global.Promise;

//Plugins
var timestamps = require('mongoose-timestamp');
var mongoosastic = require('mongoosastic');
var mongoose_delete = require('mongoose-delete');
var autopopulate = require('mongoose-autopopulate');

var db = mongoose.connection;


// default options
var defaults = {
    plugins: {
        timestamps: true,
        versions: true,
        elasticSearch: true,
        softDelete: true,
        autoPopulate: true,
        timestamps_fields: {
            createdAt: 'createdAt',
            updatedAt: 'updatedAt'
        }
    },
    connection: {
        url: 'mongodb://localhost/test',
        elasticSearchHosts: ['localhost:9200']
    }
}


function createModel(opts) {   // opts is {} or path to {} file
    // opts = name,schema
    opts = neev.objectFinder(opts);
    opts.plugins = neev.objectExtend(defaults.plugins, opts.plugins);

    var schema = mongoose.Schema(opts.schema);

    // apply Plugins
    if (opts.plugins.timestamps)
        schema.plugin(timestamps, opts.plugins.timestamps_fields);

    if (opts.plugins.elasticSearch)
        schema.plugin(mongoosastic, {
            hosts: defaults.connection.elasticSearchHosts
        })

    if (opts.plugins.softDelete)
        schema.plugin(mongoose_delete, { overrideMethods: true, deletedAt: true });

    if (opts.plugins.autoPopulate)
        schema.plugin(autopopulate);

    // custom methods

    // update document when insert or update operation happen
    schema.pre('save', function (next) {

        if (!this.__status) {

            console.log('in pre-save');

            var self = this;
            self.__status = 'insert';

            // isNew is true, It's a new record(Insert) else update record
            if (!this.isNew) {

                self.__status = 'update';

                self.constructor.findOne({ _id: this._doc._id }, function (e, r) {
                    if (e) throw e
                    else {
                        self.__old_doc = r._doc; // Before update the record take the raw document based on _id and kept in same object with __old_doc
                        return next();
                    }
                });

            } else return next();

        } else return next();

    });

    // update document when update operation happen
    schema.pre('update', function (next) {

        if (!this.__status && (this._doc)) {

            console.log('in pre-update');

            var self = this;
            self.__status = 'update';

            self.constructor.findOne({ _id: this._doc._id }, function (e, r) {
                if (e) throw e
                else {
                    self.__old_doc = r._doc;  // Before update the record take the raw document based on _id and kept in same object with __old_doc
                    return next();
                }
            });

        } else return next();

    });

    var model = mongoose.model(opts.name, schema, opts.name);

    // custom methods
    model.insert = function (data) {
        return model(data).save();
    }

    return model;
}

// transact and rollback operations
function transaction() {

    var transact_array = []; // Initialize empty array

    // Adding model to array
    add = function (operation) {
        transact_array.push(operation);
    }

    // Rollback operations
    rollback = function () {

        transact_array.reverse(); // Reverse the array

        // Iterate the array and perform the rollback operation
        for (var i = 0; i < transact_array.length; i++) {

            // document status is insert, need to remove that document
            if (transact_array[i].__status == 'insert') {
                transact_array[i].remove(); // remove document
            }

            // document status is update, need to update previouse version record
            else if (transact_array[i].__status == 'update') {

                var old_doc = transact_array[i].__old_doc;
                delete old_doc['__v'];
                delete old_doc['_id'];

                // Iterate to get old document value
                for (var key in old_doc) {
                    transact_array[i][key] = old_doc[key];
                }

                transact_array[i].save(); // update the document
            }

            // document status is not insert and update, re-insert the document
            else {

                var re_insert = {}; // Initialize empty object

                // Iterate to get removed document value
                for (var key in transact_array[i]._doc) {
                    re_insert[key] = transact_array[i]._doc[key];
                }

                // if mongoose-delete is enabled, will change the status to false
                if (re_insert['deleted'])
                    re_insert['deleted'] = false;

                transact_array[i].constructor.insert(re_insert); // Re-Insert the document with old _id
            }

        }

    }

    return {
        add: add,
        rollback: rollback
    };
}

function init(config) { // config is {} or path to {} file
    defaults = neev.objectExtend(defaults, config);

    mongoose.connect(defaults.connection.url);
    db.on('error', console.error.bind(console, 'connection error: url: ' + defaults.connection.url));
    db.once('open', function () {
        // we're connected!
        console.log('Neev-Database is connected to ' + defaults.connection.url);
    });

    return {
        db: db, // return db object
        createModel: createModel, //  create a model , it will return the model as well
        transaction: transaction, // transact and rollback
        models: mongoose.models,   // see all models
        info: module.exports
    };
}
module.exports = {
    init: init,
    name: 'database',
    dependencies: []
};