// Required modules
var merge = require('merge');

// Init the module and make it available for use
function init_component(component_name, config, dependencies) {
    var imported_component = require('neev-' + component_name); // component_name : database

    // resolve dependencies
    var ObjectDependencies = dependenciesArrayToObject(((dependencies != undefined) ? (dependencies.constructor == Array) ? dependencies : ((dependencies.constructor == Object) ? [dependencies] : []) : []));

    // loop through module instructed dependencies
    for (var i = 0; i < imported_component.dependencies.length; i++) {
        if (!ObjectDependencies[imported_component.dependencies[i]]) throw error('Dependency ' + imported_component.dependencies[i] + ' not supplied!');
    }

    // exported[component_name] = imported_component.init(objectFinder(config));
    return imported_component.init(objectFinder(config), ObjectDependencies);
}

// Convert dependencies Array To Object
function dependenciesArrayToObject(dependencies) { // [mydb] --> {database : mydb}
    // [mydb]
    var ObjectDependencies = {}
    for (var i = 0; i < dependencies.length; i++) {
        var module_item = dependencies[i];
        ObjectDependencies[module_item.info.name] = module_item;
    }
    return ObjectDependencies //{database: mydb }
}


// check if object file path is passed instead of object, if yes, then import it.
function objectFinder(obj) {
    if (typeof obj == "object") return obj;
    else if (typeof obj == "string") {
        return require(process.cwd() + obj);
    }
}

// extend passed object with default
function objectExtend(default_obj, obj) {
    return merge.recursive(true, objectFinder(default_obj), objectFinder(obj));
}

var exported = {
    // Method to init neev components
    init_component: init_component,
    // some static common methods
    objectFinder: objectFinder,
    objectExtend: objectExtend,
    // Neev version
    version: "1.0.0"
};
module.exports = exported;